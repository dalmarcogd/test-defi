// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/tracer/tracer.go

// Package tracer is a generated GoMock package.
package tracer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockTracer) Extract(ctx context.Context, carrier TextMapCarrier) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", ctx, carrier)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Extract indicates an expected call of Extract.
func (mr *MockTracerMockRecorder) Extract(ctx, carrier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTracer)(nil).Extract), ctx, carrier)
}

// Inject mocks base method.
func (m *MockTracer) Inject(ctx context.Context, carrier TextMapCarrier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inject", ctx, carrier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inject indicates an expected call of Inject.
func (mr *MockTracerMockRecorder) Inject(ctx, carrier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockTracer)(nil).Inject), ctx, carrier)
}

// ServiceName mocks base method.
func (m *MockTracer) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockTracerMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockTracer)(nil).ServiceName))
}

// Span mocks base method.
func (m *MockTracer) Span(ctx context.Context, options ...Attributes) (context.Context, TSpan) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Span", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(TSpan)
	return ret0, ret1
}

// Span indicates an expected call of Span.
func (mr *MockTracerMockRecorder) Span(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Span", reflect.TypeOf((*MockTracer)(nil).Span), varargs...)
}

// SpanName mocks base method.
func (m *MockTracer) SpanName(ctx context.Context, name string, options ...Attributes) (context.Context, TSpan) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SpanName", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(TSpan)
	return ret0, ret1
}

// SpanName indicates an expected call of SpanName.
func (mr *MockTracerMockRecorder) SpanName(ctx, name interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpanName", reflect.TypeOf((*MockTracer)(nil).SpanName), varargs...)
}

// Stop mocks base method.
func (m *MockTracer) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTracerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTracer)(nil).Stop), ctx)
}
